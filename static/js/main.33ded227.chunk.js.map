{"version":3,"sources":["MyComponents/Navbar/index.js","MyComponents/Navbar/Navbar.js","MyComponents/Login/index.js","MyComponents/Login/Login.js","views/Welcome.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","withStyles","content","padding","marginBottom","backgroundColor","props","classes","react_default","a","createElement","index_es","className","position","variant","component","color","Login","theme","root","marginTop","textAlign","width","marginLeft","marginRight","image","maxWidth","secondGrid","height","firstGrid","paper","container","spacing","item","md","elevation","gutterBottom","alt","src","autoFocus","button","size","Welcome","MyComponents_Navbar","MyComponents_Login","main","views_Welcome","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33ded227.chunk.js","sourcesContent":["import Navbar from './Navbar.js'\r\nexport default Navbar;","import React from 'react'\r\nimport {AppBar, Typography} from '@material-ui/core'\r\nimport withStyles from '@material-ui/core/styles/withStyles'\r\n\r\n\r\nconst styles={\r\n    content:{\r\n        padding:\"30px\",\r\n        marginBottom:\"20px\",\r\n        backgroundColor:\"#45aaf2\"\r\n    }\r\n\r\n}\r\n\r\nconst Navbar=(props)=>{\r\n    const {classes}=props;\r\n    return(\r\n        <AppBar className={classes.content} position=\"sticky\" >\r\n            <Typography variant=\"headline\" component=\"h1\" color=\"inherit\">\r\n                Reactive Room Chat\r\n            </Typography>\r\n        </AppBar>\r\n    )\r\n}\r\nexport default withStyles(styles)(Navbar);","import Login from './Login.js'\r\nexport default Login;","import React from 'react'\r\nimport {Input, Paper, Typography, Grid, Fab, InputLabel} from '@material-ui/core'\r\nimport withStyles from '@material-ui/core/styles/withStyles'\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n      marginTop:\"30px\",\r\n      marginBottom:\"40px\",\r\n      padding:\"5%\",\r\n      textAlign:\"center\",\r\n      width:\"70%\",\r\n      marginLeft:\"auto\",\r\n      marginRight:\"auto\"\r\n    },\r\n    image:{\r\n      maxWidth:\"100%\"\r\n    },\r\n    secondGrid:{\r\n     \r\n      marginTop:\"-20px\",\r\n      height:\"100%\",\r\n      \r\n    },\r\n    firstGrid:{\r\n      marginTop:\"20px\",\r\n      height:\"100%\",\r\n    },\r\n    paper:{\r\n      padding:\"60px\"\r\n    }\r\n    \r\n});\r\n\r\nconst Login=(props)=>{\r\n    const { classes } = props;\r\n  \r\n    return (\r\n      <div>\r\n       \r\n          <Grid container  spacing={40} className={classes.root}>\r\n            <Grid item md={6} className={classes.firstGrid}>\r\n              <Paper elevation={8} className={classes.paper}>\r\n              <Typography component=\"h1\" color=\"secondary\" gutterBottom variant=\"headline\">\r\n                Join Room\r\n              </Typography>\r\n              <img alt=\"\" className={classes.image} src=\"images/group.jpg\"/>\r\n              <InputLabel>Room Number</InputLabel><br/>\r\n              <Input autoFocus/><br/><br/>\r\n              <Fab className={classes.button} variant=\"extended\" color=\"secondary\" size=\"large\">Join</Fab>\r\n              </Paper>\r\n            </Grid>\r\n\r\n            <Grid item md={6} className={classes.secondGrid}>\r\n              <Paper elevation={2} className={classes.paper}>\r\n              <Typography component=\"h1\" color=\"primary\" gutterBottom variant=\"headline\">\r\n                ... or create new Room\r\n              </Typography>\r\n              <img alt=\"\" className={classes.image} src=\"images/group.jpg\"/>\r\n              \r\n             \r\n              <Fab className={classes.button} variant=\"extended\" color=\"primary\" size=\"large\">Create</Fab>\r\n              </Paper>  \r\n            </Grid>\r\n          </Grid>\r\n          \r\n          \r\n       \r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\nexport default withStyles(styles)(Login)","import React from 'react'\r\nimport Navbar from '../MyComponents/Navbar'\r\nimport Login from '../MyComponents/Login'\r\n\r\nconst Welcome=()=>{\r\n    return(<div>\r\n        <Navbar/>\r\n        <Login/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Welcome","import React from 'react';\nimport './App.css';\nimport Welcome from './views/Welcome'\nimport withStyles from '@material-ui/core/styles/withStyles'\n\nconst styles={\n   main:{\n    // backgroundColor:\"crimson\"\n   }\n}\n\n\nconst App=(props)=>{\n  const {classes}=props\n  return (\n    <div className={classes.main}>\n      <Welcome/>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}